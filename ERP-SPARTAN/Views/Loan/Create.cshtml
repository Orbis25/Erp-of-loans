@model Models.Models.HiAccounting.Loan

@{
    ViewData["Title"] = "Create";
}

<h1>Nuevo prestamo</h1>
<hr />
<div class="row">
    <div class="container col-lg-5 mr-lg-0 d-flex  flex-wrap">
        <div class="formulario-Prestamo  col-sm-12">
            <form>
                <div class="row mt-2 ">
                    <div class="col mt-1">
                        <label>Tipo:</label>
                    </div>
                    <div class="col">
                        <div class="form-group">
                            <select asp-for="AmortitationType" id="amortitationType" asp-items="Html.GetEnumSelectList<Models.Enums.HiAccounting.AmortitationType>()" class="form-control"></select>
                            <span asp-validation-for="AmortitationType" class="text-danger"></span>
                        </div>
                    </div>
                </div>
                <hr />
                <div class="row mt-2">
                    <div class="col mt-1 ">
                        <div class="form-group">
                            <label asp-for="InitialCapital" class="control-label">Monto</label>
                            <input id="amount" value="8000000" asp-for="InitialCapital" type="number" class="form-control" />
                            <span asp-validation-for="InitialCapital" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col mt-1 ">
                        <div class="form-group">
                            <label asp-for="Interest" class="control-label">Tasa de interes %</label>
                            <input id="interest" value="21" asp-for="Interest" type="number" class="form-control" />
                            <span asp-validation-for="Interest" class="text-danger"></span>
                        </div>
                    </div>

                </div>
                <div class="row mt-2">
                    <div class="col mt-1 ">
                        <label>Cuotas</label>
                        <input class="form-control" id="cuotas" type="number" name="cuotas" />
                    </div>
                    <div class="col mt-1 ">
                        <div class="form-group">
                            <label asp-for="PaymentModality" class="control-label">Modalidad de pago</label>
                            <select id="paymentModality" asp-for="PaymentModality" asp-items="Html.GetEnumSelectList<Models.Enums.HiAccounting.PaymentModality>()" class="form-control"></select>
                            <span asp-validation-for="PaymentModality" class="text-danger"></span>
                        </div>
                    </div>
                </div>
                <hr />
                <div class="row mt-2">
                    <div class="col mt-1 ">
                        <label>Fecha Contrato</label>
                        <input id="fechaPrestamo" class="form-control" type="date" name="f_contrato" />

                    </div>
                    <div class="col mt-1 ">
                        <div class="form-group">
                            <label asp-for="ClientUserId" class="control-label">Cliente</label>
                            <select asp-for="ClientUserId" class="form-control" asp-items="ViewBag.Clients">
                                <option selected value="">SELECCIONE EL CLIENTE</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="col  mt-1 ">
                    <label>Tipo de tasa</label>
                    <select class="custom-select" id="typeOfTasa">
                        <option value="0" >Mensual</option>
                        <option value="1" selected>Anual</option>
                    </select>
                </div>
                <br />
                <div class="form-group">
                    <input type="submit" value="Crear prestamo" class="btn  btn-primary" />
                    <a asp-action="Index" class="btn btn btn-danger">Cancelar</a>
                </div>
            </form>
        </div>

    </div>
    <div class="el-cliente col-lg-7 flex-wrap mt-1 border-left text-center ">
        @*<button onclick="getValues()" class=" btn btn-success col-6">Mostrar tabla de amortización</button>

        <div id="Result" class="table-wrapper-scroll-y my-custom-scrollbar">
            <table class="table " id="tableAmortizacion">
          
            </table>
        </div>*@
    </div>

</div>
@*<div class="row">
        <div class="col-12 col-sm-12 col-md-12">
            <form asp-action="Create">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                <div class="row">
                    <div class="col-12 col-sm-12 col-md-4 col-xl-4 col-lg-4">
                        <div class="form-group">
                            <label asp-for="InitialCapital" class="control-label">Capital Inicial</label>
                            <input asp-for="InitialCapital" class="form-control" />
                            <span asp-validation-for="InitialCapital" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-12 col-sm-12 col-md-4 col-xl-4 col-lg-4">
                        <div class="form-group">
                            <label asp-for="AmortitationType" class="control-label">Tipo de Amortización</label>
                            <select asp-for="AmortitationType" asp-items="Html.GetEnumSelectList<Models.Enums.HiAccounting.AmortitationType>()" class="form-control"></select>
                            <span asp-validation-for="AmortitationType" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-12 col-sm-12 col-md-4 col-xl-4 col-lg-4">
                        <div class="form-group">
                            <label asp-for="PaymentModality" class="control-label">Modalidad de pago</label>
                            <select asp-for="PaymentModality" asp-items="Html.GetEnumSelectList<Models.Enums.HiAccounting.PaymentModality>()" class="form-control"></select>
                            <span asp-validation-for="PaymentModality" class="text-danger"></span>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-12 col-sm-12 col-md-4 col-xl-4 col-lg-4">
                        <div class="form-group">
                            <label asp-for="Interest" class="control-label">Tasa de interes %</label>
                            <input asp-for="Interest" class="form-control" />
                            <span asp-validation-for="Interest" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-12 col-sm-12 col-md-4 col-xl-4 col-lg-4">
                        <div class="form-group">
                            <label asp-for="ClientUserId" class="control-label">Cliente</label>
                            <select asp-for="ClientUserId" class="form-control" asp-items="ViewBag.Clients">
                                <option selected value="">SELECCIONE EL CLIENTE</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-12 col-sm-12 col-md-4 col-xl-4 col-lg-4">
                    </div>
                </div>
                <div class="form-group">
                    <button type="button" class="btn btn-sm btn-info text-white">Amortization</button>
                    <input type="submit" value="Crear" class="btn btn-sm btn-primary" />
                    <a asp-action="Index" class="btn btn-sm btn-dark">Cancelar</a>
                </div>
            </form>
        </div>
    </div>*@
<script src="~/js/Loan/Index.js" asp-append-version="true"></script>
<script>
    let enumPaymentModality = {
        DIARIO: 0,
        SEMANAL: 1,
        MENSUAL: 2,
        ANUAL: 3
    }
    let amortitationType = {
        CUOTAFIJA: 0,
        INTERESFIJO: 1,
        CAPITALFINAL: 2
    }

    let enumTypeOfTasa = {
        MENSUAL: 0,
        ANUAL:1

    }
  
    function getValues() {

        //button click gets values from inputs
        const balance = parseFloat(document.getElementById("amount").value);
        const interestRate =
            parseFloat(document.getElementById("interest").value / 100.0);
        const cuotas =
            document.getElementById("cuotas").value;
        const typeOfTasa = parseInt(document.getElementById("typeOfTasa").value);

        const amortitationTypevalue = parseInt(document.getElementById("amortitationType").value);

        const paymentModality =  parseInt(document.getElementById("paymentModality").value);

        //set the div string
        var div = document.getElementById("Result");

        //in case of a re-calc, clear out the div!
        div.innerHTML = "";

        //validate inputs - display error if invalid, otherwise, display table
        var balVal = validateInputs(balance);
        var intrVal = validateInputs(interestRate);

        if (balVal && intrVal) {
        
            //Returns div string if inputs are valid
            
            let arrayAmortizacion = calAmort(balance, interestRate, paymentModality, cuotas, amortitationTypevalue, typeOfTasa);
            MakeTable(arrayAmortizacion, 'Result');
           // console.log(arrayAmortizacion);
        }
        else {
            //returns error if inputs are invalid
            div.innerHTML += "Please Check your inputs and retry - invalid values.";
        }
    }
    function calAmort(balance, interestRate, paymentModality, cuotas, amortitationTypevalue, typeOfTasa) {
        let arrayobjectAmortizacion=[];
        switch (amortitationTypevalue) {
            case amortitationType.CUOTAFIJA:
                //Execute logic CUOTAFIJA
                 arrayobjectAmortizacion= calAmortCuotaFija(balance, interestRate, cuotas, paymentModality, typeOfTasa);
                break;
            case amortitationType.INTERESFIJO:
             //Execute logic INTERESFIJO
            case amortitationType.CAPITALFINAL:
             //Execute logic CAPITALFINAL

        }
        return arrayobjectAmortizacion;
    }
    function calAmortCuotaFija(balance, interestRate, cuotas, paymentModality, typeOfTasa) {
        var arrayAmortizaion = [];
        var monthlyRate = interestRate;
     
        if (typeOfTasa == enumTypeOfTasa.ANUAL) {
            monthlyRate = interestRate / 12;
        }
        var dateNextPayment = new Date();

        var payment = balance * (monthlyRate / (1 - Math.pow(
            1 + monthlyRate, -cuotas))); 

        /**
         * Loop that calculates the monthly Loan amortization amounts then adds 
         * them to the return string 
         */
        for (var count = 0; count < cuotas; ++count) {
            let Amortizacion = { Cuota: "",Date:"", Balance: 0, Interest: 0,Payment:0, Amortizacion: 0, Endbalance: 0 }
            //in-loop interest amount holder
            var interest = 0;
      
            //in-loop monthly principal amount holder
            var monthlyPrincipal = 0;

            //start a new table row on each loop iteration

            //display the month number in col 1 using the loop count variable
            Amortizacion.Cuota = count + 1;
            //Amortizacion.Date = hoy.addMonth(Amortizacion.Period).toJSON()
            dateNextPayment = addDateToAmortizacion(dateNextPayment, paymentModality)
            Amortizacion.Date = FormatDate(dateNextPayment);

            //code for displaying in loop balance
            Amortizacion.Balance =FormatMoney( balance);

            //calc the in-loop interest amount and display
            interest = balance * monthlyRate;
            Amortizacion.Interest = FormatMoney( interest);

            //calc the in-loop monthly principal and display
            monthlyPrincipal = payment - interest;
            Amortizacion.Amortizacion =FormatMoney( monthlyPrincipal);

            Amortizacion.Endbalance = FormatMoney((balance - monthlyPrincipal));
            Amortizacion.Payment =FormatMoney( payment);
            
            //end the table row on each iteration of the loop	

            //update the balance for each loop iteration
            balance = balance - monthlyPrincipal;
            arrayAmortizaion.push(Amortizacion);
        }
        //Final piece added to return string before returning it - closes the table
        //returns the concatenated string to the page
        return arrayAmortizaion;
    }

    function addDateToAmortizacion(datevalue, paymentModality) {
        let date = new Date(datevalue);
        switch (paymentModality) {
            case enumPaymentModality.DIARIO:
               //Execute logic enumPaymentModality.DIARIO
                date = date.addDays(1);
                break;
            case enumPaymentModality.SEMANAL:
            //Execute logic enumPaymentModality.SEMANAL
                date = date.addDays(7);
                break;
            case enumPaymentModality.MENSUAL:
            //Execute logic  enumPaymentModality.MENSUAL
                date = date.addMonth(1);
                break;
            case enumPaymentModality.ANUAL:
            //Execute logic  enumPaymentModality.ANUAL
                date = date.addMonth(12);
                break;
        }
        return date;
    }


    function validateInputs(value) {
        //some code here to validate inputs
        if ((value == null) || (value == "")) {
            return false;
        }
        else {
            return true;
        }
    }
    function MakeTable(data, idElementoPadre) {
        let padre = document.getElementById(idElementoPadre);
        padre.innerHTML = "";
        let childTable = `
   <table  id ="tableData" class="table table-hover"  >
      <thead>
           <tr>
             <th> Periodo</th>
             <th> Fecha</th>
             <th> Balance</th>
             <th> Interes</th>
             <th> Pago</th>
             <th> Amortización</th>
             <th> Balance final</th>

           </tr>
       </thead> <tbody id="ExportedTableFromObject"></tbody>
    </table>`;
        padre.innerHTML = childTable;
        let tbody = document.getElementById("ExportedTableFromObject");
        data.forEach(element => {
            let tr = document.createElement("tr");
            tr.innerHTML +=
                `
              ${AgregarFilas(element)}
                `;
            tbody.appendChild(tr);
        });
    }
    function AgregarColumnas(Columnas) {
        resultado = "";
        for (const prop in Columnas) {
            resultado += `<th>${prop}</th>`;
        }
        return resultado;
    }
    function AgregarFilas(Filas) {
        resultado = "";
        for (const prop in Filas) {
            resultado += `<th style="font-weight:500; color:#626567; font-size:15px;">${Filas[prop]}</th>`;
        }
        return resultado;
    }
    function FormatMoney(money) {
        return new Intl.NumberFormat().format(money.toFixed(2));
    }
    function FormatDate(date) {
       
        const ye = new Intl.DateTimeFormat('es', { year: 'numeric' }).format(date)
        const mo = new Intl.DateTimeFormat('es', { month: 'short' }).format(date)
        const da = new Intl.DateTimeFormat('es', { day: '2-digit' }).format(date)

        return `${da}-${mo}-${ye}`;
    }
</script>
<partial name="_NotificationPartial" />


<style>
    .my-custom-scrollbar {
        position: relative;
        height: 500px;
        overflow: auto;
    }

    .table-wrapper-scroll-y {
        display: block;
    }
</style>